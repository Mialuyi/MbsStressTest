/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 111.0, "minX": 0.0, "maxY": 13052.0, "series": [{"data": [[0.0, 111.0], [0.1, 232.0], [0.2, 247.0], [0.3, 252.0], [0.4, 253.0], [0.5, 256.0], [0.6, 317.0], [0.7, 319.0], [0.8, 320.0], [0.9, 322.0], [1.0, 323.0], [1.1, 327.0], [1.2, 335.0], [1.3, 340.0], [1.4, 342.0], [1.5, 343.0], [1.6, 345.0], [1.7, 347.0], [1.8, 398.0], [1.9, 400.0], [2.0, 403.0], [2.1, 408.0], [2.2, 411.0], [2.3, 413.0], [2.4, 415.0], [2.5, 416.0], [2.6, 417.0], [2.7, 418.0], [2.8, 419.0], [2.9, 420.0], [3.0, 435.0], [3.1, 437.0], [3.2, 438.0], [3.3, 440.0], [3.4, 445.0], [3.5, 448.0], [3.6, 510.0], [3.7, 515.0], [3.8, 522.0], [3.9, 527.0], [4.0, 528.0], [4.1, 529.0], [4.2, 532.0], [4.3, 533.0], [4.4, 537.0], [4.5, 556.0], [4.6, 559.0], [4.7, 574.0], [4.8, 574.0], [4.9, 575.0], [5.0, 576.0], [5.1, 577.0], [5.2, 578.0], [5.3, 578.0], [5.4, 580.0], [5.5, 582.0], [5.6, 584.0], [5.7, 612.0], [5.8, 613.0], [5.9, 616.0], [6.0, 617.0], [6.1, 619.0], [6.2, 623.0], [6.3, 671.0], [6.4, 677.0], [6.5, 680.0], [6.6, 925.0], [6.7, 932.0], [6.8, 938.0], [6.9, 940.0], [7.0, 944.0], [7.1, 947.0], [7.2, 951.0], [7.3, 954.0], [7.4, 956.0], [7.5, 960.0], [7.6, 961.0], [7.7, 963.0], [7.8, 966.0], [7.9, 968.0], [8.0, 970.0], [8.1, 973.0], [8.2, 977.0], [8.3, 983.0], [8.4, 988.0], [8.5, 992.0], [8.6, 1005.0], [8.7, 1007.0], [8.8, 1011.0], [8.9, 1122.0], [9.0, 1123.0], [9.1, 1125.0], [9.2, 1125.0], [9.3, 1126.0], [9.4, 1132.0], [9.5, 1135.0], [9.6, 1144.0], [9.7, 1146.0], [9.8, 1147.0], [9.9, 1148.0], [10.0, 1148.0], [10.1, 1157.0], [10.2, 1163.0], [10.3, 1165.0], [10.4, 1167.0], [10.5, 1176.0], [10.6, 1182.0], [10.7, 1184.0], [10.8, 1203.0], [10.9, 1206.0], [11.0, 1207.0], [11.1, 1208.0], [11.2, 1208.0], [11.3, 1209.0], [11.4, 1210.0], [11.5, 1210.0], [11.6, 1211.0], [11.7, 1212.0], [11.8, 1212.0], [11.9, 1213.0], [12.0, 1215.0], [12.1, 1215.0], [12.2, 1215.0], [12.3, 1217.0], [12.4, 1219.0], [12.5, 1219.0], [12.6, 1220.0], [12.7, 1221.0], [12.8, 1222.0], [12.9, 1224.0], [13.0, 1225.0], [13.1, 1226.0], [13.2, 1228.0], [13.3, 1239.0], [13.4, 1241.0], [13.5, 1243.0], [13.6, 1246.0], [13.7, 1247.0], [13.8, 1247.0], [13.9, 1249.0], [14.0, 1251.0], [14.1, 1252.0], [14.2, 1255.0], [14.3, 1337.0], [14.4, 1355.0], [14.5, 1360.0], [14.6, 1362.0], [14.7, 1372.0], [14.8, 1373.0], [14.9, 1376.0], [15.0, 1461.0], [15.1, 1462.0], [15.2, 1468.0], [15.3, 1532.0], [15.4, 1535.0], [15.5, 1537.0], [15.6, 1539.0], [15.7, 1545.0], [15.8, 1549.0], [15.9, 1571.0], [16.0, 1574.0], [16.1, 1575.0], [16.2, 1576.0], [16.3, 1594.0], [16.4, 1601.0], [16.5, 1606.0], [16.6, 1642.0], [16.7, 1658.0], [16.8, 1661.0], [16.9, 1784.0], [17.0, 1795.0], [17.1, 1796.0], [17.2, 1799.0], [17.3, 1802.0], [17.4, 1821.0], [17.5, 1830.0], [17.6, 1832.0], [17.7, 1833.0], [17.8, 1872.0], [17.9, 1878.0], [18.0, 1905.0], [18.1, 2004.0], [18.2, 2008.0], [18.3, 2013.0], [18.4, 2029.0], [18.5, 2032.0], [18.6, 2034.0], [18.7, 2040.0], [18.8, 2054.0], [18.9, 2056.0], [19.0, 2060.0], [19.1, 2069.0], [19.2, 2076.0], [19.3, 2079.0], [19.4, 2080.0], [19.5, 2081.0], [19.6, 2086.0], [19.7, 2087.0], [19.8, 2089.0], [19.9, 2091.0], [20.0, 2093.0], [20.1, 2093.0], [20.2, 2095.0], [20.3, 2095.0], [20.4, 2098.0], [20.5, 2099.0], [20.6, 2103.0], [20.7, 2111.0], [20.8, 2116.0], [20.9, 2128.0], [21.0, 2132.0], [21.1, 2135.0], [21.2, 2138.0], [21.3, 2139.0], [21.4, 2144.0], [21.5, 2145.0], [21.6, 2154.0], [21.7, 2162.0], [21.8, 2162.0], [21.9, 2164.0], [22.0, 2167.0], [22.1, 2171.0], [22.2, 2175.0], [22.3, 2222.0], [22.4, 2240.0], [22.5, 2253.0], [22.6, 2260.0], [22.7, 2262.0], [22.8, 2264.0], [22.9, 2266.0], [23.0, 2267.0], [23.1, 2267.0], [23.2, 2268.0], [23.3, 2269.0], [23.4, 2277.0], [23.5, 2295.0], [23.6, 2301.0], [23.7, 2310.0], [23.8, 2326.0], [23.9, 2328.0], [24.0, 2348.0], [24.1, 2349.0], [24.2, 2350.0], [24.3, 2351.0], [24.4, 2352.0], [24.5, 2356.0], [24.6, 2361.0], [24.7, 2364.0], [24.8, 2406.0], [24.9, 2409.0], [25.0, 2410.0], [25.1, 2411.0], [25.2, 2413.0], [25.3, 2417.0], [25.4, 2420.0], [25.5, 2431.0], [25.6, 2435.0], [25.7, 2437.0], [25.8, 2438.0], [25.9, 2441.0], [26.0, 2452.0], [26.1, 2519.0], [26.2, 2528.0], [26.3, 2531.0], [26.4, 2538.0], [26.5, 2541.0], [26.6, 2544.0], [26.7, 2555.0], [26.8, 2556.0], [26.9, 2558.0], [27.0, 2560.0], [27.1, 2562.0], [27.2, 2563.0], [27.3, 2566.0], [27.4, 2628.0], [27.5, 2634.0], [27.6, 2635.0], [27.7, 2636.0], [27.8, 2645.0], [27.9, 2647.0], [28.0, 2679.0], [28.1, 2684.0], [28.2, 2746.0], [28.3, 2747.0], [28.4, 2748.0], [28.5, 2749.0], [28.6, 2758.0], [28.7, 2771.0], [28.8, 2783.0], [28.9, 2826.0], [29.0, 2826.0], [29.1, 2827.0], [29.2, 2828.0], [29.3, 2830.0], [29.4, 2913.0], [29.5, 2915.0], [29.6, 2916.0], [29.7, 3017.0], [29.8, 3035.0], [29.9, 3052.0], [30.0, 3078.0], [30.1, 3080.0], [30.2, 3081.0], [30.3, 3081.0], [30.4, 3115.0], [30.5, 3117.0], [30.6, 3126.0], [30.7, 3128.0], [30.8, 3131.0], [30.9, 3135.0], [31.0, 3166.0], [31.1, 3168.0], [31.2, 3168.0], [31.3, 3171.0], [31.4, 3172.0], [31.5, 3173.0], [31.6, 3173.0], [31.7, 3174.0], [31.8, 3175.0], [31.9, 3180.0], [32.0, 3180.0], [32.1, 3183.0], [32.2, 3187.0], [32.3, 3192.0], [32.4, 3208.0], [32.5, 3221.0], [32.6, 3245.0], [32.7, 3246.0], [32.8, 3250.0], [32.9, 3250.0], [33.0, 3252.0], [33.1, 3254.0], [33.2, 3256.0], [33.3, 3258.0], [33.4, 3262.0], [33.5, 3263.0], [33.6, 3266.0], [33.7, 3267.0], [33.8, 3270.0], [33.9, 3277.0], [34.0, 3331.0], [34.1, 3333.0], [34.2, 3335.0], [34.3, 3338.0], [34.4, 3339.0], [34.5, 3340.0], [34.6, 3343.0], [34.7, 3353.0], [34.8, 3359.0], [34.9, 3361.0], [35.0, 3370.0], [35.1, 3372.0], [35.2, 3374.0], [35.3, 3374.0], [35.4, 3376.0], [35.5, 3380.0], [35.6, 3414.0], [35.7, 3416.0], [35.8, 3418.0], [35.9, 3420.0], [36.0, 3421.0], [36.1, 3426.0], [36.2, 3432.0], [36.3, 3436.0], [36.4, 3437.0], [36.5, 3439.0], [36.6, 3441.0], [36.7, 3445.0], [36.8, 3449.0], [36.9, 3452.0], [37.0, 3456.0], [37.1, 3460.0], [37.2, 3491.0], [37.3, 3493.0], [37.4, 3493.0], [37.5, 3494.0], [37.6, 3495.0], [37.7, 3495.0], [37.8, 3496.0], [37.9, 3519.0], [38.0, 3525.0], [38.1, 3549.0], [38.2, 3581.0], [38.3, 3581.0], [38.4, 3582.0], [38.5, 3583.0], [38.6, 3584.0], [38.7, 3586.0], [38.8, 3588.0], [38.9, 3589.0], [39.0, 3592.0], [39.1, 3615.0], [39.2, 3616.0], [39.3, 3616.0], [39.4, 3637.0], [39.5, 3669.0], [39.6, 3675.0], [39.7, 3681.0], [39.8, 3742.0], [39.9, 3757.0], [40.0, 3758.0], [40.1, 3814.0], [40.2, 3815.0], [40.3, 3818.0], [40.4, 3820.0], [40.5, 3821.0], [40.6, 3822.0], [40.7, 3832.0], [40.8, 3849.0], [40.9, 3893.0], [41.0, 3894.0], [41.1, 3897.0], [41.2, 3906.0], [41.3, 3909.0], [41.4, 3911.0], [41.5, 3913.0], [41.6, 3920.0], [41.7, 3926.0], [41.8, 3935.0], [41.9, 3938.0], [42.0, 3944.0], [42.1, 3950.0], [42.2, 3954.0], [42.3, 3969.0], [42.4, 3973.0], [42.5, 3977.0], [42.6, 3983.0], [42.7, 3986.0], [42.8, 3987.0], [42.9, 3989.0], [43.0, 3991.0], [43.1, 3994.0], [43.2, 3995.0], [43.3, 3998.0], [43.4, 3999.0], [43.5, 4001.0], [43.6, 4004.0], [43.7, 4005.0], [43.8, 4007.0], [43.9, 4008.0], [44.0, 4010.0], [44.1, 4012.0], [44.2, 4014.0], [44.3, 4020.0], [44.4, 4023.0], [44.5, 4029.0], [44.6, 4031.0], [44.7, 4034.0], [44.8, 4037.0], [44.9, 4041.0], [45.0, 4043.0], [45.1, 4047.0], [45.2, 4051.0], [45.3, 4062.0], [45.4, 4069.0], [45.5, 4099.0], [45.6, 4101.0], [45.7, 4103.0], [45.8, 4105.0], [45.9, 4110.0], [46.0, 4112.0], [46.1, 4123.0], [46.2, 4134.0], [46.3, 4143.0], [46.4, 4149.0], [46.5, 4151.0], [46.6, 4156.0], [46.7, 4157.0], [46.8, 4162.0], [46.9, 4164.0], [47.0, 4166.0], [47.1, 4173.0], [47.2, 4176.0], [47.3, 4177.0], [47.4, 4189.0], [47.5, 4190.0], [47.6, 4191.0], [47.7, 4192.0], [47.8, 4192.0], [47.9, 4202.0], [48.0, 4204.0], [48.1, 4205.0], [48.2, 4205.0], [48.3, 4206.0], [48.4, 4207.0], [48.5, 4209.0], [48.6, 4213.0], [48.7, 4217.0], [48.8, 4218.0], [48.9, 4222.0], [49.0, 4228.0], [49.1, 4235.0], [49.2, 4242.0], [49.3, 4250.0], [49.4, 4256.0], [49.5, 4261.0], [49.6, 4263.0], [49.7, 4265.0], [49.8, 4267.0], [49.9, 4269.0], [50.0, 4270.0], [50.1, 4271.0], [50.2, 4273.0], [50.3, 4274.0], [50.4, 4289.0], [50.5, 4295.0], [50.6, 4298.0], [50.7, 4300.0], [50.8, 4317.0], [50.9, 4345.0], [51.0, 4346.0], [51.1, 4346.0], [51.2, 4349.0], [51.3, 4432.0], [51.4, 4518.0], [51.5, 4518.0], [51.6, 4519.0], [51.7, 4608.0], [51.8, 4821.0], [51.9, 4875.0], [52.0, 4940.0], [52.1, 4949.0], [52.2, 4958.0], [52.3, 4999.0], [52.4, 5030.0], [52.5, 5078.0], [52.6, 5099.0], [52.7, 5104.0], [52.8, 5111.0], [52.9, 5134.0], [53.0, 5154.0], [53.1, 5173.0], [53.2, 5176.0], [53.3, 5197.0], [53.4, 5199.0], [53.5, 5200.0], [53.6, 5201.0], [53.7, 5202.0], [53.8, 5211.0], [53.9, 5246.0], [54.0, 5253.0], [54.1, 5263.0], [54.2, 5268.0], [54.3, 5270.0], [54.4, 5271.0], [54.5, 5273.0], [54.6, 5274.0], [54.7, 5276.0], [54.8, 5288.0], [54.9, 5301.0], [55.0, 5304.0], [55.1, 5307.0], [55.2, 5307.0], [55.3, 5316.0], [55.4, 5332.0], [55.5, 5340.0], [55.6, 5346.0], [55.7, 5347.0], [55.8, 5348.0], [55.9, 5349.0], [56.0, 5355.0], [56.1, 5360.0], [56.2, 5362.0], [56.3, 5365.0], [56.4, 5391.0], [56.5, 5399.0], [56.6, 5405.0], [56.7, 5410.0], [56.8, 5437.0], [56.9, 5443.0], [57.0, 5453.0], [57.1, 5456.0], [57.2, 5465.0], [57.3, 5495.0], [57.4, 5500.0], [57.5, 5507.0], [57.6, 5510.0], [57.7, 5514.0], [57.8, 5517.0], [57.9, 5524.0], [58.0, 5528.0], [58.1, 5535.0], [58.2, 5546.0], [58.3, 5555.0], [58.4, 5558.0], [58.5, 5560.0], [58.6, 5566.0], [58.7, 5580.0], [58.8, 5586.0], [58.9, 5587.0], [59.0, 5589.0], [59.1, 5595.0], [59.2, 5603.0], [59.3, 5605.0], [59.4, 5618.0], [59.5, 5620.0], [59.6, 5622.0], [59.7, 5624.0], [59.8, 5625.0], [59.9, 5627.0], [60.0, 5638.0], [60.1, 5641.0], [60.2, 5643.0], [60.3, 5646.0], [60.4, 5659.0], [60.5, 5660.0], [60.6, 5662.0], [60.7, 5664.0], [60.8, 5671.0], [60.9, 5675.0], [61.0, 5684.0], [61.1, 5688.0], [61.2, 5690.0], [61.3, 5690.0], [61.4, 5699.0], [61.5, 5700.0], [61.6, 5706.0], [61.7, 5708.0], [61.8, 5716.0], [61.9, 5722.0], [62.0, 5731.0], [62.1, 5733.0], [62.2, 5737.0], [62.3, 5743.0], [62.4, 5745.0], [62.5, 5750.0], [62.6, 5754.0], [62.7, 5755.0], [62.8, 5758.0], [62.9, 5759.0], [63.0, 5760.0], [63.1, 5762.0], [63.2, 5764.0], [63.3, 5765.0], [63.4, 5772.0], [63.5, 5774.0], [63.6, 5775.0], [63.7, 5776.0], [63.8, 5777.0], [63.9, 5778.0], [64.0, 5778.0], [64.1, 5779.0], [64.2, 5780.0], [64.3, 5784.0], [64.4, 5795.0], [64.5, 5804.0], [64.6, 5814.0], [64.7, 5827.0], [64.8, 5833.0], [64.9, 5842.0], [65.0, 5850.0], [65.1, 5854.0], [65.2, 5857.0], [65.3, 5869.0], [65.4, 5877.0], [65.5, 5880.0], [65.6, 5893.0], [65.7, 5921.0], [65.8, 5946.0], [65.9, 5961.0], [66.0, 6019.0], [66.1, 6102.0], [66.2, 6115.0], [66.3, 6117.0], [66.4, 6126.0], [66.5, 6135.0], [66.6, 6176.0], [66.7, 6221.0], [66.8, 6228.0], [66.9, 6239.0], [67.0, 6240.0], [67.1, 6252.0], [67.2, 6261.0], [67.3, 6309.0], [67.4, 6309.0], [67.5, 6313.0], [67.6, 6394.0], [67.7, 6409.0], [67.8, 6410.0], [67.9, 6414.0], [68.0, 6417.0], [68.1, 6478.0], [68.2, 6482.0], [68.3, 6591.0], [68.4, 6596.0], [68.5, 6678.0], [68.6, 6892.0], [68.7, 6979.0], [68.8, 6981.0], [68.9, 6982.0], [69.0, 6994.0], [69.1, 7153.0], [69.2, 7181.0], [69.3, 7187.0], [69.4, 7196.0], [69.5, 7199.0], [69.6, 7289.0], [69.7, 7339.0], [69.8, 7356.0], [69.9, 7375.0], [70.0, 7379.0], [70.1, 7396.0], [70.2, 7415.0], [70.3, 7416.0], [70.4, 7427.0], [70.5, 7430.0], [70.6, 7434.0], [70.7, 7437.0], [70.8, 7451.0], [70.9, 7453.0], [71.0, 7454.0], [71.1, 7454.0], [71.2, 7455.0], [71.3, 7455.0], [71.4, 7455.0], [71.5, 7457.0], [71.6, 7458.0], [71.7, 7458.0], [71.8, 7459.0], [71.9, 7460.0], [72.0, 7464.0], [72.1, 7472.0], [72.2, 7480.0], [72.3, 7486.0], [72.4, 7488.0], [72.5, 7489.0], [72.6, 7492.0], [72.7, 7496.0], [72.8, 7499.0], [72.9, 7499.0], [73.0, 7500.0], [73.1, 7500.0], [73.2, 7501.0], [73.3, 7501.0], [73.4, 7502.0], [73.5, 7502.0], [73.6, 7503.0], [73.7, 7503.0], [73.8, 7511.0], [73.9, 7514.0], [74.0, 7520.0], [74.1, 7534.0], [74.2, 7542.0], [74.3, 7552.0], [74.4, 7555.0], [74.5, 7566.0], [74.6, 7571.0], [74.7, 7573.0], [74.8, 7581.0], [74.9, 7585.0], [75.0, 7589.0], [75.1, 7591.0], [75.2, 7592.0], [75.3, 7594.0], [75.4, 7595.0], [75.5, 7598.0], [75.6, 7601.0], [75.7, 7602.0], [75.8, 7603.0], [75.9, 7613.0], [76.0, 7616.0], [76.1, 7618.0], [76.2, 7636.0], [76.3, 7637.0], [76.4, 7637.0], [76.5, 7638.0], [76.6, 7639.0], [76.7, 7639.0], [76.8, 7640.0], [76.9, 7641.0], [77.0, 7641.0], [77.1, 7642.0], [77.2, 7643.0], [77.3, 7646.0], [77.4, 7647.0], [77.5, 7663.0], [77.6, 7667.0], [77.7, 7668.0], [77.8, 7682.0], [77.9, 7710.0], [78.0, 7815.0], [78.1, 7829.0], [78.2, 7901.0], [78.3, 7922.0], [78.4, 7957.0], [78.5, 7969.0], [78.6, 7974.0], [78.7, 7980.0], [78.8, 7992.0], [78.9, 7998.0], [79.0, 8006.0], [79.1, 8010.0], [79.2, 8013.0], [79.3, 8022.0], [79.4, 8041.0], [79.5, 8052.0], [79.6, 8060.0], [79.7, 8061.0], [79.8, 8119.0], [79.9, 8121.0], [80.0, 8143.0], [80.1, 8147.0], [80.2, 8154.0], [80.3, 8184.0], [80.4, 8188.0], [80.5, 8193.0], [80.6, 8201.0], [80.7, 8229.0], [80.8, 8232.0], [80.9, 8269.0], [81.0, 8410.0], [81.1, 8420.0], [81.2, 8429.0], [81.3, 8441.0], [81.4, 8450.0], [81.5, 8486.0], [81.6, 8505.0], [81.7, 8550.0], [81.8, 8680.0], [81.9, 8684.0], [82.0, 8686.0], [82.1, 8707.0], [82.2, 8711.0], [82.3, 8711.0], [82.4, 8741.0], [82.5, 8766.0], [82.6, 8784.0], [82.7, 8796.0], [82.8, 8848.0], [82.9, 8852.0], [83.0, 8865.0], [83.1, 8881.0], [83.2, 8936.0], [83.3, 8941.0], [83.4, 9141.0], [83.5, 9177.0], [83.6, 9186.0], [83.7, 9188.0], [83.8, 9194.0], [83.9, 9195.0], [84.0, 9199.0], [84.1, 9202.0], [84.2, 9206.0], [84.3, 9213.0], [84.4, 9214.0], [84.5, 9217.0], [84.6, 9222.0], [84.7, 9232.0], [84.8, 9238.0], [84.9, 9246.0], [85.0, 9252.0], [85.1, 9262.0], [85.2, 9263.0], [85.3, 9263.0], [85.4, 9264.0], [85.5, 9270.0], [85.6, 9272.0], [85.7, 9273.0], [85.8, 9274.0], [85.9, 9278.0], [86.0, 9291.0], [86.1, 9295.0], [86.2, 9304.0], [86.3, 9325.0], [86.4, 9327.0], [86.5, 9338.0], [86.6, 9351.0], [86.7, 9358.0], [86.8, 9373.0], [86.9, 9381.0], [87.0, 9386.0], [87.1, 9411.0], [87.2, 9415.0], [87.3, 9425.0], [87.4, 9433.0], [87.5, 9444.0], [87.6, 9457.0], [87.7, 9486.0], [87.8, 9488.0], [87.9, 9523.0], [88.0, 9527.0], [88.1, 9530.0], [88.2, 9533.0], [88.3, 9538.0], [88.4, 9607.0], [88.5, 9614.0], [88.6, 9615.0], [88.7, 9617.0], [88.8, 9617.0], [88.9, 9621.0], [89.0, 9625.0], [89.1, 9644.0], [89.2, 9651.0], [89.3, 9654.0], [89.4, 9660.0], [89.5, 9735.0], [89.6, 9739.0], [89.7, 9744.0], [89.8, 9746.0], [89.9, 9749.0], [90.0, 9759.0], [90.1, 9771.0], [90.2, 9875.0], [90.3, 9909.0], [90.4, 9932.0], [90.5, 9935.0], [90.6, 9938.0], [90.7, 9939.0], [90.8, 9953.0], [90.9, 10016.0], [91.0, 10026.0], [91.1, 10028.0], [91.2, 10041.0], [91.3, 10045.0], [91.4, 10151.0], [91.5, 10217.0], [91.6, 10218.0], [91.7, 10272.0], [91.8, 10281.0], [91.9, 10293.0], [92.0, 10304.0], [92.1, 10310.0], [92.2, 10322.0], [92.3, 10342.0], [92.4, 10343.0], [92.5, 10353.0], [92.6, 10388.0], [92.7, 10402.0], [92.8, 10403.0], [92.9, 10417.0], [93.0, 10504.0], [93.1, 10508.0], [93.2, 10529.0], [93.3, 10531.0], [93.4, 10536.0], [93.5, 10542.0], [93.6, 10547.0], [93.7, 10550.0], [93.8, 10640.0], [93.9, 10641.0], [94.0, 10645.0], [94.1, 10660.0], [94.2, 10661.0], [94.3, 10668.0], [94.4, 10676.0], [94.5, 10687.0], [94.6, 10702.0], [94.7, 10761.0], [94.8, 10787.0], [94.9, 10808.0], [95.0, 10810.0], [95.1, 10859.0], [95.2, 10876.0], [95.3, 10894.0], [95.4, 10896.0], [95.5, 10898.0], [95.6, 10899.0], [95.7, 10905.0], [95.8, 10920.0], [95.9, 10922.0], [96.0, 10937.0], [96.1, 10944.0], [96.2, 10944.0], [96.3, 10945.0], [96.4, 10948.0], [96.5, 10949.0], [96.6, 10951.0], [96.7, 10953.0], [96.8, 10970.0], [96.9, 10979.0], [97.0, 10982.0], [97.1, 10985.0], [97.2, 10987.0], [97.3, 10990.0], [97.4, 11078.0], [97.5, 11081.0], [97.6, 11085.0], [97.7, 11085.0], [97.8, 11087.0], [97.9, 11268.0], [98.0, 11300.0], [98.1, 11337.0], [98.2, 11339.0], [98.3, 11341.0], [98.4, 11520.0], [98.5, 11567.0], [98.6, 12639.0], [98.7, 12767.0], [98.8, 12786.0], [98.9, 12806.0], [99.0, 12854.0], [99.1, 12854.0], [99.2, 12870.0], [99.3, 12914.0], [99.4, 12920.0], [99.5, 12921.0], [99.6, 12924.0], [99.7, 12991.0], [99.8, 13011.0], [99.9, 13017.0], [100.0, 13052.0]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 175.0, "series": [{"data": [[100.0, 1.0], [200.0, 29.0], [300.0, 63.0], [400.0, 82.0], [500.0, 107.0], [600.0, 48.0], [900.0, 97.0], [1000.0, 15.0], [1100.0, 97.0], [1200.0, 175.0], [1300.0, 32.0], [1400.0, 16.0], [1500.0, 57.0], [1600.0, 22.0], [1700.0, 21.0], [1800.0, 35.0], [1900.0, 7.0], [2000.0, 122.0], [2100.0, 86.0], [2200.0, 67.0], [2300.0, 57.0], [2400.0, 68.0], [2500.0, 66.0], [2600.0, 36.0], [2700.0, 38.0], [2800.0, 26.0], [2900.0, 12.0], [3000.0, 38.0], [3100.0, 96.0], [3200.0, 82.0], [3300.0, 80.0], [3400.0, 114.0], [3500.0, 59.0], [3600.0, 37.0], [3700.0, 17.0], [3800.0, 51.0], [3900.0, 116.0], [4000.0, 103.0], [4200.0, 139.0], [4300.0, 32.0], [4100.0, 118.0], [4400.0, 3.0], [4600.0, 4.0], [4500.0, 15.0], [4700.0, 3.0], [4800.0, 8.0], [4900.0, 18.0], [5000.0, 16.0], [5100.0, 43.0], [5300.0, 81.0], [5200.0, 70.0], [5500.0, 90.0], [5400.0, 44.0], [5600.0, 114.0], [5700.0, 149.0], [5800.0, 60.0], [5900.0, 16.0], [6000.0, 6.0], [6100.0, 29.0], [6200.0, 27.0], [6300.0, 20.0], [6600.0, 7.0], [6400.0, 30.0], [6500.0, 10.0], [6800.0, 3.0], [6700.0, 1.0], [6900.0, 19.0], [7000.0, 4.0], [7100.0, 23.0], [7300.0, 27.0], [7400.0, 142.0], [7200.0, 3.0], [7600.0, 115.0], [7500.0, 127.0], [7900.0, 39.0], [7800.0, 10.0], [7700.0, 8.0], [8000.0, 41.0], [8100.0, 40.0], [8400.0, 30.0], [8300.0, 3.0], [8500.0, 8.0], [8700.0, 34.0], [8600.0, 14.0], [8200.0, 17.0], [8800.0, 20.0], [8900.0, 10.0], [9200.0, 108.0], [9100.0, 36.0], [9300.0, 41.0], [9400.0, 44.0], [9500.0, 25.0], [9600.0, 53.0], [9700.0, 34.0], [9800.0, 8.0], [9900.0, 29.0], [10000.0, 26.0], [10200.0, 27.0], [10100.0, 1.0], [10500.0, 39.0], [10300.0, 35.0], [10600.0, 41.0], [10400.0, 17.0], [10700.0, 11.0], [10800.0, 40.0], [11000.0, 24.0], [10900.0, 86.0], [11200.0, 9.0], [11500.0, 10.0], [11300.0, 20.0], [12700.0, 13.0], [12600.0, 2.0], [12900.0, 23.0], [12800.0, 19.0], [13000.0, 14.0]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 175.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4238.0, "series": [{"data": [[0.0, 175.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 587.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4238.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1941.9183999999989, "minX": 1.69530192E12, "maxY": 1941.9183999999989, "series": [{"data": [[1.69530192E12, 1941.9183999999989]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530192E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 111.0, "minX": 2.0, "maxY": 13051.0, "series": [{"data": [[2.0, 13030.5], [5.0, 13017.0], [8.0, 13009.666666666666], [11.0, 13011.0], [14.0, 13051.0], [18.0, 12923.5], [21.0, 12925.0], [23.0, 12925.333333333334], [24.0, 12919.0], [30.0, 12916.333333333332], [35.0, 12921.0], [37.0, 12881.0], [39.0, 12870.0], [38.0, 12880.5], [40.0, 12839.0], [44.0, 12856.0], [47.0, 12855.0], [46.0, 12854.0], [49.0, 12854.0], [51.0, 12854.0], [50.0, 12854.0], [53.0, 12848.5], [54.0, 12806.0], [56.0, 12793.0], [59.0, 12787.666666666666], [61.0, 12797.0], [60.0, 12777.0], [67.0, 12699.0], [66.0, 12763.5], [64.0, 12772.333333333334], [71.0, 11342.0], [68.0, 12639.0], [75.0, 11340.0], [74.0, 11340.0], [78.0, 11341.333333333334], [76.0, 11343.0], [83.0, 11337.5], [100.0, 11571.29411764706], [123.0, 11083.149999999998], [122.0, 11081.333333333334], [127.0, 10986.0], [130.0, 10982.5], [128.0, 10984.75], [136.0, 10987.0], [151.0, 10970.0], [148.0, 10970.5], [146.0, 10983.1], [158.0, 10946.0], [153.0, 10949.0], [152.0, 10969.5], [161.0, 111.0], [162.0, 10949.833333333334], [160.0, 10946.0], [175.0, 10948.0], [174.0, 10945.0], [173.0, 10946.0], [178.0, 10947.249999999998], [177.0, 10948.0], [191.0, 10896.0], [188.0, 10899.0], [187.0, 10946.142857142857], [186.0, 10951.0], [185.0, 10952.0], [197.0, 10879.0], [196.0, 10877.0], [195.0, 10883.0], [194.0, 10896.333333333334], [207.0, 10861.0], [202.0, 10897.333333333334], [201.0, 10906.5], [213.0, 10916.8], [211.0, 10885.0], [212.0, 10859.0], [209.0, 10860.5], [220.0, 10905.666666666666], [218.0, 10900.666666666666], [217.0, 10905.0], [226.0, 10901.0], [225.0, 10897.0], [224.0, 10896.0], [239.0, 10850.624999999998], [237.0, 10913.666666666666], [236.0, 10811.0], [235.0, 10872.333333333334], [234.0, 10899.0], [247.0, 10880.333333333334], [246.0, 10919.0], [244.0, 10849.25], [254.0, 10761.0], [253.0, 10769.0], [252.0, 10778.0], [251.0, 10771.0], [270.0, 10682.5], [268.0, 10668.0], [266.0, 10669.0], [263.0, 10678.0], [262.0, 10678.0], [261.0, 10688.0], [260.0, 10679.0], [259.0, 10694.5], [257.0, 10723.0], [287.0, 10655.0], [277.0, 10661.5], [273.0, 10682.666666666666], [302.0, 10538.5], [300.0, 10533.0], [297.0, 10572.0], [296.0, 10658.0], [294.0, 10640.0], [292.0, 10640.0], [291.0, 10652.0], [317.0, 10529.0], [315.0, 10531.42857142857], [308.0, 10537.0], [307.0, 10537.0], [305.0, 10541.0], [335.0, 10402.0], [333.0, 10403.5], [331.0, 10418.6], [326.0, 10471.0], [325.0, 10506.333333333334], [322.0, 10515.333333333334], [339.0, 2264.1], [351.0, 10305.666666666666], [348.0, 10307.333333333334], [345.0, 10400.0], [342.0, 10396.0], [340.0, 10389.0], [364.0, 249.5], [366.0, 251.0], [367.0, 10264.666666666666], [365.0, 10276.0], [361.0, 10281.0], [358.0, 10277.0], [356.0, 10287.0], [355.0, 10288.0], [354.0, 10303.0], [353.0, 10293.0], [374.0, 1885.4166666666665], [369.0, 253.33333333333334], [383.0, 10033.6], [378.0, 10038.666666666666], [375.0, 10052.0], [372.0, 10053.0], [370.0, 10043.5], [368.0, 10151.0], [398.0, 9909.0], [399.0, 9878.0], [397.0, 9920.5], [393.0, 9939.0], [392.0, 9943.0], [391.0, 9951.0], [390.0, 9958.0], [385.0, 10009.0], [384.0, 10016.0], [415.0, 9745.0], [414.0, 9750.0], [412.0, 9756.0], [410.0, 9760.0], [407.0, 9769.5], [405.0, 9771.5], [403.0, 9814.0], [402.0, 9876.0], [429.0, 9734.0], [427.0, 9735.0], [426.0, 9742.25], [422.0, 9740.0], [421.0, 9743.0], [419.0, 9744.0], [418.0, 9746.5], [417.0, 9745.0], [446.0, 11566.0], [442.0, 11567.0], [441.0, 11577.5], [439.0, 11589.0], [438.0, 11598.0], [437.0, 9746.8], [432.0, 9734.75], [454.0, 9653.750000000002], [448.0, 9655.0], [474.0, 9615.333333333334], [468.0, 9964.833333333334], [465.0, 9888.625], [492.0, 321.2], [488.0, 2648.25], [487.0, 3420.0], [486.0, 9621.0], [480.0, 318.0], [483.0, 4971.5], [482.0, 9999.6], [481.0, 9615.333333333334], [489.0, 341.0], [493.0, 340.6], [495.0, 9621.0], [494.0, 9624.0], [509.0, 347.0], [503.0, 326.83333333333337], [496.0, 9614.5], [502.0, 336.5], [501.0, 990.2857142857142], [500.0, 9616.0], [507.0, 345.1111111111111], [511.0, 9525.5], [508.0, 9528.666666666666], [497.0, 9614.0], [505.0, 9531.333333333334], [504.0, 9530.0], [516.0, 9525.833333333332], [534.0, 9425.0], [530.0, 9449.333333333334], [572.0, 9247.0], [574.0, 9841.333333333334], [550.0, 9420.42857142857], [548.0, 9412.0], [564.0, 10547.0], [560.0, 10550.0], [558.0, 10638.0], [604.0, 2644.625], [602.0, 416.0], [598.0, 412.4], [596.0, 417.0], [592.0, 9325.0], [606.0, 9946.0], [586.0, 404.85714285714283], [588.0, 9366.333333333332], [582.0, 401.50000000000006], [612.0, 436.0], [610.0, 411.5], [616.0, 435.0], [618.0, 10345.333333333334], [614.0, 435.0], [624.0, 5378.5], [630.0, 2072.5], [628.0, 4384.4], [626.0, 7019.333333333333], [668.0, 9186.0], [658.0, 9415.4], [652.0, 9240.666666666666], [642.0, 9814.4], [698.0, 9506.571428571428], [688.0, 9568.5], [682.0, 9193.0], [678.0, 9196.0], [732.0, 9176.0], [728.0, 9208.083333333334], [716.0, 9848.0], [714.0, 9198.0], [766.0, 2630.733333333333], [756.0, 5799.666666666667], [754.0, 524.5], [752.0, 6855.8], [740.0, 9186.714285714284], [760.0, 8420.0], [742.0, 9146.0], [764.0, 536.0], [762.0, 2785.857142857143], [748.0, 2106.4], [746.0, 9131.0], [744.0, 9142.0], [784.0, 9447.0], [788.0, 9386.0], [790.0, 2325.2], [768.0, 2781.0], [782.0, 9145.0], [778.0, 9467.0], [776.0, 9537.8], [786.0, 9435.666666666666], [796.0, 583.0], [798.0, 9262.625], [812.0, 574.5], [808.0, 9295.0], [806.0, 577.875], [804.0, 573.0], [816.0, 9291.0], [824.0, 9269.25], [848.0, 9272.285714285714], [854.0, 7938.5], [852.0, 9259.666666666666], [832.0, 9286.166666666668], [834.0, 9254.5], [882.0, 616.0], [884.0, 616.0], [876.0, 612.5], [878.0, 7691.75], [890.0, 7584.5], [888.0, 7592.666666666667], [892.0, 7581.0], [898.0, 7580.0], [896.0, 620.0], [900.0, 624.0], [920.0, 8046.666666666667], [918.0, 7768.75], [910.0, 7641.0], [908.0, 7641.0], [954.0, 7572.0], [958.0, 7511.0], [934.0, 7593.0], [928.0, 7592.888888888889], [948.0, 8199.0], [946.0, 8228.75], [942.0, 7572.0], [938.0, 7558.0], [936.0, 7551.0], [966.0, 7529.5], [990.0, 8143.75], [986.0, 8146.666666666667], [982.0, 7847.333333333334], [976.0, 7554.666666666667], [962.0, 7515.5], [964.0, 7690.5], [974.0, 8191.5], [970.0, 7553.5], [968.0, 7521.0], [994.0, 8082.0], [992.0, 2811.285714285714], [998.0, 7499.0], [1012.0, 7431.0], [1006.0, 7488.0], [1004.0, 7488.25], [1000.0, 7439.0], [1080.0, 970.5], [1084.0, 4468.0], [1064.0, 942.0], [1056.0, 7977.0], [1072.0, 960.7142857142857], [1032.0, 8120.0], [1028.0, 8012.166666666666], [1024.0, 7416.0], [1052.0, 940.0], [1048.0, 954.1666666666667], [1044.0, 7356.0], [1096.0, 2974.25], [1140.0, 8510.142857142857], [1092.0, 3309.3333333333335], [1104.0, 8892.777777777777], [1088.0, 7675.5], [1120.0, 8440.8], [1148.0, 8863.666666666666], [1136.0, 8684.0], [1200.0, 8614.0], [1212.0, 8488.0], [1168.0, 8154.0], [1160.0, 8739.57142857143], [1264.0, 7696.0], [1276.0, 7823.0], [1224.0, 7479.0], [1240.0, 7429.75], [1260.0, 7829.0], [1256.0, 7488.666666666667], [1248.0, 7398.5], [1340.0, 1005.0], [1328.0, 7639.5], [1324.0, 7640.0], [1312.0, 7637.5], [1280.0, 8006.0], [1288.0, 6736.2], [1304.0, 7690.5], [1300.0, 7708.0], [1348.0, 3217.6666666666665], [1344.0, 7639.0], [1352.0, 7635.75], [1356.0, 7640.333333333333], [1380.0, 7526.0], [1372.0, 7589.5], [1368.0, 7613.0], [1460.0, 7464.0], [1436.0, 8041.0], [1428.0, 7492.0], [1424.0, 7500.0], [1480.0, 7455.153846153846], [1520.0, 7455.111111111111], [1472.0, 7459.0], [1512.0, 7455.5], [1508.0, 7455.0], [1500.0, 7666.0], [1492.0, 8055.250000000001], [1568.0, 6382.0], [1540.0, 7454.0], [1644.0, 7195.0], [1628.0, 6958.833333333333], [1604.0, 5751.5], [1600.0, 5728.0], [1708.0, 5685.0], [1688.0, 5696.833333333333], [1680.0, 5690.0], [1668.0, 6568.5], [1732.0, 5662.0], [1784.0, 5671.0], [1772.0, 5643.0], [1764.0, 5625.0], [1744.0, 5683.272727272727], [1728.0, 5937.166666666667], [1824.0, 5556.0], [1792.0, 5877.5], [1820.0, 5587.499999999999], [1816.0, 5595.5], [1812.0, 5597.333333333333], [1808.0, 5589.0], [1908.0, 5464.5], [1916.0, 5303.0], [1904.0, 5450.5], [1872.0, 5991.333333333333], [1864.0, 6239.0], [1860.0, 6973.0], [1868.0, 6986.0], [1896.0, 5382.666666666667], [1892.0, 5364.0], [1924.0, 5312.0], [1932.0, 5276.0], [1920.0, 5288.5], [1956.0, 6678.0], [1952.0, 5762.0], [1944.0, 5773.0], [1940.0, 5801.0], [2032.0, 5301.0], [2044.0, 5603.0], [2040.0, 5877.0], [1988.0, 5861.0], [2008.0, 6410.0], [2004.0, 5505.666666666667], [2136.0, 1126.0], [2152.0, 5468.0], [2128.0, 5850.0], [2288.0, 5307.5], [2280.0, 1160.0], [2264.0, 4031.0], [2224.0, 4327.222222222223], [2200.0, 5842.0], [2192.0, 5893.0], [2176.0, 5726.0], [2312.0, 2172.0], [2304.0, 5311.0], [2320.0, 5246.0], [2392.0, 5203.0], [2376.0, 4204.2], [2352.0, 5276.0], [2536.0, 2560.333333333333], [2544.0, 1218.8], [2528.0, 1360.0], [2432.0, 4218.666666666667], [2464.0, 4835.666666666667], [2520.0, 1370.357142857143], [2552.0, 1414.1999999999998], [2504.0, 5109.0], [2576.0, 2883.8], [2640.0, 1642.0], [2656.0, 3914.0], [2600.0, 2164.25], [2568.0, 5142.333333333333], [2704.0, 4030.6666666666665], [2688.0, 3926.0], [2736.0, 4260.0], [2792.0, 4230.0], [2784.0, 4040.0], [2928.0, 4013.0], [2888.0, 2114.5], [2904.0, 2976.5], [2896.0, 3010.0], [2912.0, 3896.0], [2920.0, 3757.75], [2872.0, 3419.6666666666665], [2848.0, 4273.0], [2840.0, 1942.0000000000002], [2832.0, 4346.6], [2816.0, 4191.0], [2968.0, 2099.0], [2944.0, 2155.6666666666665], [3008.0, 3617.0], [3024.0, 3615.0], [3040.0, 3885.25], [2976.0, 3842.0], [2984.0, 2056.0], [3144.0, 2133.0], [3152.0, 3420.0], [3104.0, 3511.114285714286], [3176.0, 3359.0], [3280.0, 3246.5], [3312.0, 3182.3333333333335], [3288.0, 3246.0], [3320.0, 3177.3333333333335], [3304.0, 3361.25], [3216.0, 3452.0], [3240.0, 3267.25], [3352.0, 3173.0], [3328.0, 3339.8], [3400.0, 3263.0], [3416.0, 3524.0], [3392.0, 3116.25], [3384.0, 3555.5], [3376.0, 3129.0], [3368.0, 3165.8], [3568.0, 3231.5], [3576.0, 3205.0], [3528.0, 2775.0], [3560.0, 2771.0], [3472.0, 3170.333333333333], [3696.0, 2519.0], [3656.0, 2564.0], [3664.0, 3052.0], [3680.0, 2539.8333333333335], [3640.0, 2555.5], [3720.0, 2353.0], [3832.0, 2326.0], [3712.0, 2287.0], [3736.0, 2351.3333333333335], [3744.0, 2300.0], [3808.0, 2373.0], [3824.0, 2328.0], [3848.0, 2259.0], [3880.0, 2263.0], [2137.0, 2666.0], [2121.0, 1128.75], [2081.0, 6224.0], [2073.0, 6241.0], [2297.0, 1146.6666666666667], [2273.0, 1162.0], [2265.0, 4024.0], [2257.0, 4596.862068965516], [2209.0, 5110.0], [2193.0, 5650.0], [2185.0, 5924.0], [2321.0, 4270.0], [2425.0, 4536.0], [2313.0, 1143.0], [2337.0, 4271.714285714285], [2369.0, 4208.666666666667], [2417.0, 5199.0], [2409.0, 5200.25], [2401.0, 4539.0], [2393.0, 5203.0], [2441.0, 4164.0], [2537.0, 1243.125], [2481.0, 5134.285714285715], [2497.0, 1176.0], [2513.0, 5570.5], [2521.0, 1240.0], [2553.0, 2365.2], [2569.0, 1209.142857142857], [2585.0, 1901.0], [2657.0, 3913.5], [2641.0, 3951.0], [2649.0, 4635.5], [2593.0, 1401.6666666666667], [2561.0, 5384.571428571428], [2609.0, 3986.5], [2617.0, 5351.0], [2577.0, 1217.0], [2601.0, 2609.5], [2761.0, 4252.5], [2777.0, 4111.0], [2793.0, 4228.0], [2705.0, 3985.0], [2697.0, 4005.0], [2689.0, 3958.0], [2737.0, 4263.0], [2937.0, 3496.8], [2905.0, 1971.0], [2897.0, 3081.5], [2913.0, 2309.125], [2881.0, 2753.777777777778], [2921.0, 2752.0], [2857.0, 4262.5], [2825.0, 1785.0], [2833.0, 4307.0], [2945.0, 2119.0], [3001.0, 3965.8333333333335], [2961.0, 2014.0], [2993.0, 1979.8], [2969.0, 3935.5], [3025.0, 3615.75], [2977.0, 3220.0], [2985.0, 2056.0], [3129.0, 2632.375], [3145.0, 3587.0], [3121.0, 3434.0], [3113.0, 3437.5], [3105.0, 3460.0], [3185.0, 3349.3333333333335], [3161.0, 3380.4], [3217.0, 3449.0], [3225.0, 3442.0], [3289.0, 3248.4285714285716], [3273.0, 3418.0], [3337.0, 3173.0], [3353.0, 3208.4444444444443], [3377.0, 3128.0], [3369.0, 3132.0], [3361.0, 3167.5], [3393.0, 3549.0], [3425.0, 3519.0], [3417.0, 3527.5], [3409.0, 3253.6], [3577.0, 3190.0], [3529.0, 2774.0], [3561.0, 2744.0], [3457.0, 3073.3333333333335], [3497.0, 3369.5], [3657.0, 2562.75], [3665.0, 3051.0], [3681.0, 2538.0], [3641.0, 2555.5], [3633.0, 2556.3333333333335], [3625.0, 2633.75], [3769.0, 2417.0], [3713.0, 2362.0], [3745.0, 2301.0], [3817.0, 2348.75], [3777.0, 2410.0], [3793.0, 2408.0], [3833.0, 2267.0], [3849.0, 2253.0], [3881.0, 2264.0], [3873.0, 2266.5], [1085.0, 4467.5], [1061.0, 940.0], [1069.0, 6606.09090909091], [1065.0, 2006.5], [1081.0, 959.0], [1077.0, 970.6666666666666], [1025.0, 7416.0], [1073.0, 8183.75], [1033.0, 7605.75], [1053.0, 2371.1], [1137.0, 8683.0], [1097.0, 987.8], [1145.0, 8865.333333333334], [1113.0, 8710.5], [1105.0, 8715.0], [1093.0, 7957.0], [1089.0, 7966.0], [1197.0, 8347.499999999998], [1161.0, 8808.0], [1153.0, 7718.666666666667], [1269.0, 6919.666666666667], [1277.0, 7816.0], [1265.0, 7820.0], [1221.0, 7922.0], [1217.0, 8487.0], [1229.0, 7480.0], [1257.0, 7463.0], [1253.0, 7452.0], [1333.0, 7639.666666666667], [1329.0, 7641.0], [1325.0, 7641.0], [1321.0, 7639.5], [1305.0, 7702.0], [1349.0, 1005.5], [1397.0, 7502.666666666667], [1393.0, 7503.0], [1385.0, 7504.0], [1365.0, 7616.0], [1353.0, 7636.0], [1465.0, 7997.0], [1449.0, 8010.0], [1445.0, 8008.0], [1409.0, 7683.333333333332], [1533.0, 7454.0], [1521.0, 7456.0], [1513.0, 7455.0], [1505.0, 6813.5], [1477.0, 7638.0], [1473.0, 7459.5], [1581.0, 5776.666666666667], [1569.0, 7377.0], [1557.0, 5833.0], [1553.0, 5851.5], [1549.0, 5856.5], [1545.0, 5877.0], [1613.0, 5755.0], [1653.0, 5777.0], [1645.0, 5775.0], [1621.0, 5754.0], [1617.0, 5778.0], [1601.0, 5744.0], [1721.0, 5698.5], [1709.0, 5685.0], [1669.0, 6235.0], [1785.0, 5671.0], [1789.0, 5882.0], [1777.0, 5631.285714285715], [1773.0, 5609.0], [1769.0, 5644.333333333333], [1733.0, 5662.0], [1849.0, 5512.333333333333], [1833.0, 5535.0], [1793.0, 5641.0], [1837.0, 6019.0], [1829.0, 5536.8], [1821.0, 5531.0], [1817.0, 5586.0], [1809.0, 5602.0], [1905.0, 5449.0], [1857.0, 7013.5], [1893.0, 5361.0], [1889.0, 6128.0], [1885.0, 6981.222222222223], [1881.0, 6981.0], [1981.0, 6145.75], [1933.0, 5274.0], [1929.0, 5272.0], [1945.0, 5774.0], [1941.0, 5800.0], [1937.0, 5273.0], [2041.0, 5443.0], [2045.0, 5879.0], [2037.0, 5889.0], [2033.0, 5693.5], [2013.0, 6209.8], [2001.0, 5860.0], [2025.0, 6312.5], [2021.0, 6072.333333333334], [2122.0, 1126.0], [2138.0, 1127.5], [2114.0, 5663.666666666667], [2170.0, 5421.5], [2154.0, 5701.0], [2058.0, 6260.0], [2066.0, 6239.666666666667], [2130.0, 5831.0], [2282.0, 1153.3333333333333], [2258.0, 4023.0], [2210.0, 5605.0], [2202.0, 4157.0], [2314.0, 3719.5], [2418.0, 5199.0], [2306.0, 5304.0], [2354.0, 5467.0], [2346.0, 5268.666666666667], [2338.0, 5275.0], [2402.0, 4538.333333333333], [2330.0, 4272.0], [2394.0, 4206.0], [2386.0, 4205.0], [2370.0, 4204.0], [2530.0, 1345.25], [2450.0, 4164.0], [2434.0, 4217.0], [2506.0, 5104.5], [2522.0, 5030.0], [2514.0, 5562.0], [2570.0, 1215.0], [2626.0, 5332.0], [2634.0, 4369.461538461539], [2650.0, 3940.0], [2594.0, 1226.0], [2610.0, 1604.25], [2618.0, 5347.0], [2562.0, 4944.0], [2578.0, 1218.4], [2586.0, 3994.875], [2602.0, 1453.6666666666667], [2714.0, 4050.75], [2770.0, 4216.4], [2754.0, 4518.333333333333], [2802.0, 4190.0], [2794.0, 4230.0], [2882.0, 3994.0], [2898.0, 2118.6666666666665], [2906.0, 2478.0], [2914.0, 1834.0], [2890.0, 2077.6666666666665], [2938.0, 2574.75], [2930.0, 4009.0], [2922.0, 3057.0], [2874.0, 4059.0], [2842.0, 4074.5714285714284], [2834.0, 4301.0], [2826.0, 4192.666666666667], [2818.0, 4190.0], [2970.0, 3773.0], [2954.0, 2013.0], [3066.0, 3581.0], [3050.0, 3583.3333333333335], [3042.0, 3756.0], [2978.0, 2003.0], [2986.0, 3135.3333333333335], [3154.0, 3416.0], [3146.0, 3586.5], [3162.0, 3375.0], [3130.0, 2131.0], [3122.0, 3433.0], [3106.0, 3450.0], [3170.0, 3373.0], [3306.0, 3191.5], [3298.0, 3374.0], [3266.0, 3250.0], [3274.0, 3417.0], [3282.0, 3246.0], [3314.0, 3180.0], [3226.0, 3445.0], [3218.0, 3445.0], [3210.0, 3458.75], [3242.0, 3262.5], [3338.0, 3174.0], [3330.0, 3174.5], [3410.0, 3265.0], [3402.0, 3262.0], [3378.0, 3126.0], [3578.0, 3188.0], [3522.0, 2826.4], [3562.0, 2764.75], [3554.0, 2747.25], [3474.0, 3330.3333333333335], [3498.0, 3370.0], [3546.0, 2748.5], [3658.0, 3066.0], [3642.0, 2558.6], [3610.0, 3126.2], [3602.0, 2645.1000000000004], [3626.0, 2633.5], [3674.0, 2539.0], [3770.0, 2419.0], [3834.0, 2267.0], [3842.0, 2266.571428571429], [3850.0, 2248.0], [3858.0, 2238.5], [2123.0, 1126.0], [2139.0, 2503.8571428571427], [2147.0, 5732.0], [2067.0, 6798.0], [2075.0, 6239.5], [2107.0, 5956.133333333334], [2091.0, 6222.0], [2115.0, 5630.333333333333], [2283.0, 4117.428571428572], [2291.0, 1147.3333333333335], [2227.0, 4584.142857142858], [2179.0, 5419.5], [2187.0, 5921.0], [2195.0, 5763.5], [2419.0, 5199.0], [2371.0, 4204.0], [2363.0, 5203.111111111111], [2347.0, 5267.0], [2331.0, 4273.0], [2531.0, 1244.0000000000002], [2555.0, 3025.125], [2547.0, 1207.5], [2539.0, 1335.916666666667], [2475.0, 5078.0], [2435.0, 4223.25], [2443.0, 4159.0], [2467.0, 4661.5], [2523.0, 1357.5], [2659.0, 3909.5], [2587.0, 1501.9], [2675.0, 1659.5], [2627.0, 5333.0], [2643.0, 4451.0], [2651.0, 3935.0], [2595.0, 1322.0769230769229], [2603.0, 2428.0909090909095], [2571.0, 1208.0], [2763.0, 4210.0], [2755.0, 4518.0], [2771.0, 4300.0], [2715.0, 4796.0], [2707.0, 3982.5], [2691.0, 4394.5], [2739.0, 4277.333333333333], [2779.0, 4208.0], [2915.0, 2095.0], [2899.0, 2818.0], [2843.0, 3082.5], [2891.0, 2667.0], [2883.0, 2896.5], [2931.0, 2461.0], [2875.0, 2525.6], [2851.0, 4269.0], [2819.0, 4191.5], [2963.0, 2014.75], [3003.0, 1878.0], [2995.0, 4345.0], [2955.0, 3819.0], [2971.0, 2559.0], [3043.0, 3738.0], [3059.0, 3581.5], [3027.0, 3615.0], [3067.0, 3582.0], [2979.0, 2087.0], [2987.0, 1985.75], [3123.0, 3432.0], [3107.0, 3439.0], [3179.0, 3358.3333333333335], [3155.0, 3414.0], [3299.0, 3371.0], [3275.0, 3350.4], [3251.0, 3384.75], [3227.0, 3444.75], [3243.0, 3264.0], [3235.0, 3268.0], [3339.0, 2419.0], [3355.0, 3284.3333333333335], [3379.0, 3124.0], [3363.0, 3168.0], [3403.0, 3091.0], [3419.0, 3450.6666666666665], [3523.0, 2786.0], [3579.0, 3187.0], [3531.0, 2760.0], [3571.0, 3226.3333333333335], [3475.0, 3453.0], [3459.0, 3095.0], [3507.0, 2828.75], [3707.0, 2214.0], [3603.0, 3142.0], [3587.0, 3181.3333333333335], [3643.0, 2566.0], [3763.0, 2444.125], [3771.0, 2418.0], [3747.0, 2272.5], [3835.0, 2326.3333333333335], [3787.0, 2406.0], [3779.0, 2409.3333333333335], [3819.0, 2295.0], [3883.0, 2262.0], [3851.0, 2247.0], [3867.0, 2266.25], [537.0, 9415.5], [539.0, 9413.5], [519.0, 9492.333333333334], [535.0, 9419.0], [533.0, 9430.5], [531.0, 9439.0], [527.0, 9486.5], [525.0, 9487.333333333334], [545.0, 9411.0], [563.0, 10547.0], [573.0, 9251.666666666666], [549.0, 9422.5], [567.0, 10547.0], [565.0, 10547.0], [559.0, 10550.0], [557.0, 10640.5], [555.0, 9385.5], [553.0, 9884.333333333334], [605.0, 9339.0], [603.0, 2901.75], [597.0, 9327.75], [595.0, 415.0], [593.0, 9325.25], [585.0, 9365.666666666666], [579.0, 7869.333333333333], [577.0, 399.0], [613.0, 418.3333333333333], [627.0, 440.0], [617.0, 418.1428571428571], [621.0, 7851.25], [623.0, 10322.0], [611.0, 434.0], [635.0, 10216.8], [615.0, 437.0], [629.0, 442.0], [625.0, 439.5], [645.0, 10039.0], [647.0, 10025.5], [667.0, 9191.0], [663.0, 9875.6], [657.0, 9272.0], [655.0, 9239.0], [651.0, 9238.0], [643.0, 9133.0], [641.0, 10509.5], [703.0, 9221.75], [699.0, 9887.0], [691.0, 9691.666666666666], [689.0, 9935.25], [681.0, 9856.333333333332], [679.0, 9202.0], [677.0, 9195.5], [729.0, 9140.0], [735.0, 9185.0], [731.0, 9179.0], [707.0, 9199.5], [715.0, 9319.166666666666], [713.0, 9216.0], [757.0, 527.1666666666666], [753.0, 515.0], [759.0, 8428.333333333334], [767.0, 8410.0], [749.0, 511.25], [741.0, 9192.0], [747.0, 4502.5], [781.0, 8898.0], [771.0, 9542.0], [779.0, 9461.0], [791.0, 557.1666666666666], [787.0, 559.0], [799.0, 576.3333333333334], [789.0, 9385.5], [815.0, 9292.0], [805.0, 2756.75], [811.0, 2513.777777777778], [813.0, 9304.0], [809.0, 6375.0], [803.0, 2479.869565217391], [827.0, 9280.0], [849.0, 9271.0], [843.0, 9273.5], [839.0, 9272.0], [837.0, 9278.5], [835.0, 9250.0], [881.0, 615.0], [883.0, 611.0], [875.0, 612.8333333333333], [885.0, 5020.727272727273], [879.0, 2012.0], [893.0, 7579.0], [901.0, 7587.666666666667], [899.0, 4804.8], [903.0, 7581.0], [917.0, 7638.0], [911.0, 7640.0], [909.0, 7616.0], [905.0, 7601.333333333333], [957.0, 7551.666666666667], [929.0, 7594.0], [951.0, 8199.333333333334], [947.0, 8210.0], [937.0, 7546.0], [989.0, 684.0], [987.0, 674.0], [983.0, 8143.0], [975.0, 8193.0], [973.0, 7552.0], [993.0, 2531.25], [1023.0, 7416.0], [1021.0, 7426.0], [1015.0, 7429.0], [1009.0, 7486.0], [1007.0, 7487.0], [1086.0, 977.5], [1058.0, 4505.75], [1062.0, 940.0], [1070.0, 958.3333333333334], [1078.0, 7746.4], [1082.0, 7789.666666666667], [1074.0, 969.0], [1038.0, 7736.75], [1034.0, 7361.0], [1026.0, 7415.0], [1054.0, 963.0], [1050.0, 956.0], [1046.0, 7904.5], [1094.0, 4955.0], [1090.0, 1751.2222222222222], [1150.0, 8768.5], [1130.0, 8699.0], [1122.0, 8705.0], [1142.0, 7168.0], [1210.0, 7493.666666666666], [1206.0, 7494.0], [1198.0, 7952.0], [1170.0, 8795.5], [1162.0, 8802.0], [1278.0, 7774.0], [1250.0, 7394.0], [1266.0, 7815.0], [1246.0, 7733.5], [1222.0, 7474.0], [1230.0, 7901.5], [1226.0, 7483.5], [1238.0, 7436.0], [1234.0, 7364.5], [1262.0, 7804.5], [1334.0, 7646.0], [1330.0, 7641.0], [1326.0, 7642.0], [1306.0, 7559.0], [1282.0, 8006.0], [1294.0, 6590.0], [1302.0, 7601.5], [1298.0, 6731.25], [1358.0, 7616.0], [1394.0, 7502.285714285715], [1346.0, 7637.0], [1390.0, 7502.0], [1386.0, 7504.0], [1378.0, 7699.75], [1374.0, 7572.0], [1370.0, 7712.5], [1366.0, 7610.428571428572], [1466.0, 7458.0], [1470.0, 7460.0], [1462.0, 7999.0], [1438.0, 8040.5], [1414.0, 7500.0], [1434.0, 7498.5], [1426.0, 7500.5], [1522.0, 7454.0], [1534.0, 7454.0], [1478.0, 7457.0], [1474.0, 7459.0], [1510.0, 7455.0], [1506.0, 6811.25], [1502.0, 6812.5], [1578.0, 5778.125], [1586.0, 6481.75], [1582.0, 5772.0], [1570.0, 5779.0], [1566.0, 7378.0], [1546.0, 5874.5], [1542.0, 6904.166666666667], [1610.0, 5767.5], [1658.0, 5816.0], [1650.0, 5770.571428571428], [1646.0, 5775.0], [1634.0, 6236.833333333333], [1622.0, 5780.0], [1674.0, 5710.8], [1722.0, 5855.0], [1710.0, 5687.307692307692], [1682.0, 5693.4], [1666.0, 7186.5], [1786.0, 6116.0], [1758.0, 5642.333333333333], [1730.0, 5663.5], [1846.0, 5674.5], [1838.0, 5514.0], [1830.0, 5542.0], [1822.0, 5557.0], [1806.0, 5638.5], [1794.0, 5854.0], [1918.0, 5290.0], [1906.0, 5439.0], [1858.0, 7028.0], [1902.0, 5454.0], [1890.0, 6892.0], [1978.0, 5735.0], [1982.0, 5737.0], [1934.0, 5271.0], [1930.0, 5271.0], [1962.0, 5797.75], [1958.0, 5826.0], [1938.0, 5271.0], [2046.0, 5590.857142857143], [2026.0, 6313.0], [2010.0, 6410.0], [1998.0, 6189.333333333333], [1994.0, 6042.666666666667], [2006.0, 6410.0], [2164.0, 5498.428571428572], [2140.0, 1123.0], [2068.0, 1122.0], [2076.0, 6234.0], [2092.0, 5645.285714285715], [2052.0, 5391.5], [2172.0, 5408.666666666667], [2148.0, 5232.0], [2132.0, 5905.714285714285], [2204.0, 5198.0], [2268.0, 4021.0], [2260.0, 4018.5], [2228.0, 5596.0], [2180.0, 5699.0], [2404.0, 4205.5], [2324.0, 4271.0], [2428.0, 4216.5], [2388.0, 4208.0], [2380.0, 4206.0], [2364.0, 5220.0], [2356.0, 4265.0], [2348.0, 5267.0], [2532.0, 2619.0], [2540.0, 1580.7272727272727], [2468.0, 5176.5], [2460.0, 4149.0], [2452.0, 4163.0], [2508.0, 1241.5], [2516.0, 1248.4444444444443], [2524.0, 5030.0], [2556.0, 4042.0], [2676.0, 1660.0], [2588.0, 1209.7272727272727], [2636.0, 1633.0], [2644.0, 4957.0], [2660.0, 3906.0], [2596.0, 1560.0], [2572.0, 1215.0], [2716.0, 4612.0], [2796.0, 4223.5], [2692.0, 4007.0], [2740.0, 4276.333333333333], [2804.0, 1768.0], [2780.0, 4247.666666666667], [2756.0, 4448.125], [2812.0, 4189.0], [2788.0, 4525.5], [2924.0, 3086.0], [2900.0, 3944.0], [2916.0, 2079.0], [2884.0, 2171.0], [2892.0, 2054.5], [2932.0, 2160.0], [2876.0, 2404.714285714286], [2868.0, 4113.0], [2852.0, 4265.0], [2836.0, 2165.8888888888887], [2948.0, 2116.0], [2956.0, 2912.5], [3004.0, 1878.0], [2988.0, 2797.1111111111113], [2972.0, 1976.857142857143], [2964.0, 3217.0000000000005], [3068.0, 3582.0], [3012.0, 3655.75], [2980.0, 2883.5], [2996.0, 2141.0], [3196.0, 3338.0], [3148.0, 3532.6666666666665], [3156.0, 3413.0], [3172.0, 3371.0], [3180.0, 3354.0], [3308.0, 3187.0], [3284.0, 3250.0], [3300.0, 3370.0], [3228.0, 3441.0], [3204.0, 3336.0], [3260.0, 3257.8], [3236.0, 3269.0], [3356.0, 3167.0], [3388.0, 3224.5], [3380.0, 3121.0], [3532.0, 2758.0], [3476.0, 3443.0], [3508.0, 2828.0], [3708.0, 2434.0], [3692.0, 2527.6], [3588.0, 2654.0], [3724.0, 2349.0], [3716.0, 2359.0], [3740.0, 2349.555555555556], [3772.0, 2418.0], [3812.0, 2310.25], [3788.0, 2407.75], [3804.0, 2402.714285714286], [3820.0, 2295.0], [3884.0, 2266.4285714285716], [2117.0, 5197.0], [2173.0, 5405.0], [2125.0, 5774.0], [2109.0, 6126.0], [2061.0, 6055.2], [2053.0, 5391.0], [2085.0, 6221.0], [2077.0, 6228.0], [2269.0, 1166.3333333333333], [2277.0, 4250.714285714285], [2221.0, 4142.0], [2205.0, 5831.0], [2189.0, 5679.5], [2181.0, 5694.0], [2341.0, 5271.0], [2429.0, 4218.0], [2405.0, 5201.6], [2397.0, 4206.0], [2541.0, 1413.5], [2557.0, 5253.5], [2453.0, 4166.5], [2461.0, 4148.0], [2509.0, 5100.666666666667], [2517.0, 4483.25], [2525.0, 3456.1428571428573], [2549.0, 4033.75], [2589.0, 1226.5], [2669.0, 3906.777777777778], [2637.0, 3978.0], [2629.0, 5041.0], [2645.0, 5256.0], [2653.0, 3926.0], [2597.0, 1963.1666666666667], [2565.0, 4940.333333333333], [2621.0, 1621.5], [2613.0, 2819.7000000000003], [2605.0, 5332.5], [2573.0, 4040.5], [2581.0, 1219.4285714285716], [2789.0, 4433.0], [2797.0, 4217.0], [2813.0, 1777.0], [2757.0, 4518.0], [2717.0, 4371.0], [2701.0, 4004.25], [2749.0, 4519.0], [2741.0, 4176.0], [2725.0, 4227.75], [2781.0, 4067.0], [2941.0, 3397.25], [2893.0, 2055.6666666666665], [2901.0, 2138.6666666666665], [2909.0, 2138.0], [2845.0, 4132.0], [2933.0, 2095.9], [2917.0, 3891.0], [2877.0, 4036.0], [2821.0, 4192.0], [2829.0, 2061.5], [2949.0, 2116.0], [2957.0, 3669.416666666667], [2989.0, 2901.5], [2965.0, 3015.0], [3069.0, 3581.0], [3029.0, 3614.5], [2981.0, 3680.6666666666665], [3197.0, 3333.0], [3141.0, 2847.0], [3189.0, 3338.75], [3317.0, 3180.0], [3325.0, 3343.0], [3309.0, 3187.0], [3205.0, 3332.5], [3221.0, 3448.0], [3293.0, 3378.0], [3285.0, 3250.0], [3341.0, 3173.6666666666665], [3381.0, 3557.0], [3397.0, 3267.75], [3429.0, 3080.3333333333335], [3565.0, 3273.4], [3525.0, 2784.0], [3533.0, 2754.0], [3573.0, 3220.0], [3469.0, 3173.0], [3461.0, 3009.0], [3517.0, 2827.0], [3501.0, 2828.0], [3493.0, 2997.5], [3685.0, 2531.0], [3669.0, 2546.5], [3693.0, 2525.0], [3605.0, 3134.5], [3637.0, 2556.0], [3677.0, 2543.0], [3813.0, 2311.0], [3773.0, 2413.0], [3789.0, 2420.0], [3797.0, 2388.4], [3829.0, 2292.0], [3845.0, 2292.0], [3853.0, 2238.0], [1083.0, 964.3333333333334], [1059.0, 932.5], [1087.0, 4454.5], [1063.0, 7997.0], [1071.0, 954.0], [1079.0, 7426.0], [1075.0, 966.0], [1055.0, 925.0], [1027.0, 7415.0], [1051.0, 6122.142857142857], [1047.0, 949.8333333333333], [1095.0, 2973.0], [1115.0, 8711.0], [1111.0, 8711.0], [1211.0, 7500.0], [1175.0, 8622.25], [1171.0, 8790.0], [1167.0, 8800.0], [1279.0, 7682.0], [1251.0, 7891.0], [1275.0, 6825.75], [1271.0, 7080.0], [1235.0, 7437.0], [1227.0, 7482.0], [1263.0, 7829.0], [1259.0, 7818.5], [1343.0, 5743.428571428572], [1339.0, 2112.833333333333], [1327.0, 7636.0], [1315.0, 7578.75], [1307.0, 7654.0], [1283.0, 7980.0], [1299.0, 7711.0], [1347.0, 3660.8], [1383.0, 7512.0], [1467.0, 7458.0], [1471.0, 7458.0], [1463.0, 7731.5], [1447.0, 8010.75], [1443.0, 8009.0], [1435.0, 8041.0], [1419.0, 7500.166666666667], [1415.0, 7501.0], [1515.0, 7457.0], [1511.0, 7454.0], [1563.0, 7378.75], [1595.0, 5732.666666666667], [1559.0, 5836.5], [1555.0, 5937.5], [1551.0, 5855.0], [1547.0, 5869.0], [1543.0, 7515.75], [1651.0, 5761.666666666667], [1647.0, 5775.0], [1623.0, 5765.2], [1619.0, 5778.0], [1607.0, 5759.700000000001], [1603.0, 5745.666666666667], [1719.0, 5680.0], [1695.0, 5705.142857142857], [1679.0, 5690.0], [1783.0, 6115.0], [1775.0, 5624.0], [1771.0, 5624.0], [1755.0, 5868.0], [1747.0, 5803.666666666667], [1847.0, 5509.0], [1855.0, 6140.666666666667], [1807.0, 5614.6], [1795.0, 6118.0], [1839.0, 5517.0], [1835.0, 5535.0], [1823.0, 5555.0], [1811.0, 5618.0], [1871.0, 5499.0], [1915.0, 5390.714285714285], [1867.0, 6003.0], [1859.0, 5532.0], [1899.0, 5449.666666666667], [1887.0, 5362.0], [1879.0, 6648.333333333333], [1931.0, 5270.0], [1951.0, 5769.5], [1983.0, 6556.0], [1975.0, 6155.307692307692], [1935.0, 5272.0], [1923.0, 5305.0], [1943.0, 5793.5], [1939.0, 5268.5], [2047.0, 5749.0], [2023.0, 6003.5], [2019.0, 6408.5], [2166.0, 5347.0], [2174.0, 5433.0], [2134.0, 1629.6363636363635], [2118.0, 5813.0], [2158.0, 5813.666666666667], [2086.0, 6222.0], [2054.0, 5871.0], [2062.0, 5418.0], [2078.0, 6229.0], [2070.0, 6154.333333333333], [2126.0, 5774.0], [2294.0, 5352.857142857143], [2206.0, 4151.0], [2270.0, 2388.1428571428573], [2262.0, 4734.0], [2190.0, 5674.0], [2182.0, 5924.0], [2198.0, 5646.0], [2366.0, 4212.5], [2310.0, 2972.0], [2350.0, 5272.0], [2342.0, 5270.333333333333], [2430.0, 4221.0], [2406.0, 5201.0], [2318.0, 4505.25], [2550.0, 2152.0], [2454.0, 4153.0], [2438.0, 5344.333333333333], [2478.0, 5079.0], [2470.0, 5176.0], [2534.0, 1468.0], [2518.0, 1972.5], [2526.0, 1362.0], [2542.0, 2663.833333333333], [2558.0, 4949.0], [2502.0, 4643.523809523808], [2510.0, 4062.0], [2590.0, 1210.0], [2686.0, 3943.1666666666665], [2678.0, 3910.5], [2638.0, 3971.0], [2654.0, 3921.0], [2598.0, 1928.235294117647], [2606.0, 5326.0], [2614.0, 1594.5], [2574.0, 1216.0], [2710.0, 4024.6666666666665], [2718.0, 1705.0], [2694.0, 4008.0], [2750.0, 4519.0], [2734.0, 4159.0], [2814.0, 4190.333333333333], [2782.0, 4178.0], [2766.0, 4167.0], [2926.0, 2725.6666666666665], [2886.0, 3216.4], [2918.0, 1966.0], [2902.0, 2732.3333333333335], [2910.0, 3530.8], [2846.0, 4283.0], [2894.0, 2005.25], [2878.0, 2374.25], [2870.0, 4065.5], [2862.0, 4233.2], [2830.0, 4270.5], [2822.0, 4192.0], [2838.0, 2090.0], [2966.0, 2095.0], [2958.0, 2010.0], [2950.0, 2060.0], [3006.0, 3617.0], [2974.0, 3357.5], [3022.0, 4290.0], [3030.0, 4000.7272727272725], [3062.0, 3582.0], [3054.0, 3584.0], [2982.0, 3676.0], [2990.0, 4333.0], [3142.0, 2080.0], [3190.0, 3334.0], [3166.0, 3374.5], [3126.0, 3537.0], [3134.0, 3588.6], [3182.0, 3351.5], [3174.0, 3359.0], [3230.0, 3439.5], [3326.0, 2165.6666666666665], [3270.0, 3418.0], [3294.0, 3376.0], [3214.0, 3455.0], [3206.0, 3461.0], [3262.0, 3254.6666666666665], [3254.0, 3256.5], [3246.0, 3262.0], [3342.0, 3174.0], [3454.0, 3230.2000000000003], [3398.0, 3268.0], [3382.0, 3555.0], [3566.0, 3245.0], [3526.0, 2783.0], [3486.0, 3016.2], [3478.0, 3428.0], [3502.0, 2829.0], [3550.0, 2746.25], [3710.0, 2435.4285714285716], [3702.0, 2438.833333333333], [3654.0, 2562.0], [3662.0, 2661.8], [3694.0, 2519.0], [3686.0, 2531.75], [3638.0, 2555.0], [3670.0, 2545.0], [3726.0, 2351.2], [3742.0, 2298.0], [3774.0, 2410.0], [3766.0, 2424.3333333333335], [3854.0, 2237.0], [2167.0, 5394.0], [2135.0, 3885.0], [2151.0, 5204.0], [2111.0, 6833.0], [2055.0, 6383.0], [2063.0, 6256.0], [2079.0, 6231.0], [2143.0, 5783.25], [2127.0, 5618.0], [2271.0, 1162.5], [2303.0, 5342.777777777777], [2287.0, 5307.0], [2263.0, 4040.0], [2191.0, 5669.0], [2199.0, 5645.666666666667], [2311.0, 1144.8], [2391.0, 4204.333333333333], [2383.0, 4207.0], [2343.0, 5271.0], [2327.0, 4608.333333333333], [2535.0, 1468.0], [2439.0, 4163.0], [2455.0, 4149.0], [2471.0, 5123.666666666667], [2527.0, 3195.0], [2519.0, 1283.0], [2559.0, 5560.0], [2511.0, 5580.0], [2551.0, 1252.3333333333333], [2543.0, 2847.272727272727], [2671.0, 1657.75], [2591.0, 2719.3636363636365], [2639.0, 1642.0], [2647.0, 4444.5], [2687.0, 3920.0], [2679.0, 3912.0], [2607.0, 4006.0], [2615.0, 4675.5], [2575.0, 1218.0], [2583.0, 3991.0], [2599.0, 1496.0], [2799.0, 4190.0], [2815.0, 4191.5], [2759.0, 4236.0], [2775.0, 4269.0], [2791.0, 4350.5], [2695.0, 4007.0], [2751.0, 4518.0], [2735.0, 4244.666666666667], [2935.0, 3272.0], [2903.0, 2435.8], [2895.0, 3338.333333333334], [2911.0, 2106.6666666666665], [2847.0, 4274.0], [2887.0, 3040.0], [2943.0, 2120.0], [2927.0, 3850.5], [2919.0, 2099.0], [2879.0, 1819.5], [2855.0, 4264.333333333333], [2839.0, 1798.75], [2823.0, 4192.0], [3047.0, 3621.75], [2999.0, 4344.5], [2991.0, 2868.6666666666665], [2975.0, 2892.5], [3055.0, 3583.25], [3023.0, 4067.6666666666665], [3039.0, 3757.4], [3031.0, 3760.0], [2983.0, 2042.0], [3127.0, 2101.4444444444443], [3151.0, 3420.0], [3119.0, 3436.5], [3111.0, 3438.25], [3231.0, 3439.0], [3271.0, 3418.0], [3431.0, 3079.75], [3407.0, 3085.0], [3335.0, 3174.0], [3351.0, 3338.0], [3375.0, 3130.4], [3439.0, 3079.75], [3399.0, 3263.0], [3487.0, 2915.3333333333335], [3575.0, 3209.0], [3479.0, 3418.0], [3519.0, 2826.6666666666665], [3503.0, 2830.0], [3495.0, 2872.0], [3543.0, 2748.142857142857], [3535.0, 2750.5], [3687.0, 2529.0], [3695.0, 2521.0], [3711.0, 2362.0], [3663.0, 2562.6666666666665], [3599.0, 2647.0], [3591.0, 2674.25], [3647.0, 2572.0], [3639.0, 2558.0], [3671.0, 2541.0], [3743.0, 2301.5], [3823.0, 2258.25], [3719.0, 2355.3333333333335], [3735.0, 2349.0], [3791.0, 2347.5], [3847.0, 2260.0], [3879.0, 2263.0], [3863.0, 2261.0]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}, {"data": [[1941.9182000000005, 5105.547800000003]], "isOverall": false, "label": "API  Request From Juakali-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3884.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9500.0, "minX": 1.69530192E12, "maxY": 79166.66666666667, "series": [{"data": [[1.69530192E12, 79166.66666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69530192E12, 9500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530192E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5105.547800000003, "minX": 1.69530192E12, "maxY": 5105.547800000003, "series": [{"data": [[1.69530192E12, 5105.547800000003]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530192E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5105.534999999996, "minX": 1.69530192E12, "maxY": 5105.534999999996, "series": [{"data": [[1.69530192E12, 5105.534999999996]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530192E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2357.6249999999945, "minX": 1.69530192E12, "maxY": 2357.6249999999945, "series": [{"data": [[1.69530192E12, 2357.6249999999945]], "isOverall": false, "label": "API  Request From Juakali", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530192E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 111.0, "minX": 1.69530192E12, "maxY": 13052.0, "series": [{"data": [[1.69530192E12, 13052.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69530192E12, 9759.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69530192E12, 12854.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69530192E12, 10810.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69530192E12, 111.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69530192E12, 4270.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530192E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 12913.5, "series": [{"data": [[32.0, 11337.0], [555.0, 3368.0], [568.0, 5779.0], [177.0, 9359.0], [196.0, 7640.0], [199.0, 9654.0], [1.0, 111.0], [256.0, 10876.5], [275.0, 5800.0], [68.0, 12913.5], [291.0, 2541.0], [329.0, 440.0], [324.0, 4051.0], [366.0, 2091.0], [428.0, 8188.0], [451.0, 4270.0], [484.0, 1210.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 568.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 12913.5, "series": [{"data": [[32.0, 11337.0], [555.0, 3368.0], [568.0, 5779.0], [177.0, 9359.0], [196.0, 7640.0], [199.0, 9654.0], [1.0, 111.0], [256.0, 10876.5], [275.0, 5800.0], [68.0, 12913.5], [291.0, 2541.0], [329.0, 440.0], [324.0, 4051.0], [366.0, 2091.0], [428.0, 8188.0], [451.0, 4270.0], [484.0, 1210.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 568.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69530192E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69530192E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530192E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69530192E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69530192E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69530192E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69530192E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69530192E12, 83.33333333333333]], "isOverall": false, "label": "API  Request From Juakali-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530192E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69530192E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69530192E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69530192E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

